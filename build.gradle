plugins {
	id 'java-library'
	id 'eclipse'
	id 'com.github.hierynomus.license' version '0.16.1'
	id 'maven-publish'
}

import org.apache.tools.ant.filters.*

eclipse {
	project {
		name = 'PaintballLegacy'
	}
}

defaultTasks 'licenseFormat', 'clean', 'build', 'install'

group = 'de.blablubbabc'
version = projectVersion

ext.projectName = projectName
ext.url = url
ext.description = description
ext.authors = authors
ext.author = authors.split(',//s*')[0]

repositories {
	mavenLocal()
	mavenCentral()

	// Bukkit/Spigot API
	maven { url 'https://hub.spigotmc.org/nexus/content/groups/public/' }
	// VaultAPI
	maven { url 'https://nexus.hc.to/content/repositories/pub_releases' }
	// IndividualSigns, NuVotifier
	maven { url 'https://jitpack.io' }
}

dependencies {
	compileOnly 'org.bukkit:bukkit:1.14.2-R0.1-SNAPSHOT'
	compileOnly 'com.github.blablubbabc:IndividualSigns:2.7.0'
	compileOnly 'net.milkbowl.vault:VaultAPI:1.6'
	compileOnly 'com.github.NuVotifier:NuVotifier:2.7.2'

	testImplementation 'org.bukkit:bukkit:1.14.2-R0.1-SNAPSHOT'
	testImplementation 'junit:junit:4.13.1'
}

java
{
	sourceCompatibility = JavaVersion.VERSION_1_8
}

jar {
	manifest {
		attributes 'Implementation-Title': project.name,
					'Implementation-Version': project.version
	}
}

processResources {
	from ('NOTICE.txt')
	from ('LICENSE.txt')
	from project.sourceSets.main.resources.srcDirs
	filter {
			line ->
			line
			.replace('${name}', project.name)
			.replace('${version}', project.version)
			.replace('${author}', project.author)
			.replace('${authors}', project.authors)
			.replace('${url}', project.url)
			.replace('${description}', project.description)
	}
	// TODO Some plugins might add resource directories twice.
	// See https://github.com/gradle/gradle/issues/17236
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

license {
	ext.name = project.name
	ext.author = project.author
	ext.authors = project.authors
	ext.url = project.url

	header file('HEADER.txt')

	include '**/*.java'
	exclude '**/thirdparty/**'

	ignoreFailures true
	strictCheck true
}

configure([compileJava, compileTestJava]) {
	// options.compilerArgs += [ '-Xlint:all', '-Xlint:-path' ]
	options.deprecation = false
	options.encoding = 'utf8'
}

task sourceJar(type: Jar) {
	from sourceSets.main.java
	from sourceSets.main.resources
	classifier = 'sources'
}

javadoc {
	options.encoding = 'utf8'
	options.addStringOption('Xdoclint:none', '-quiet')
	failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
	classifier = 'javadoc'
}

artifacts {
	archives jar
	archives sourceJar
	archives javadocJar
}

publishing {
	publications {
		mavenJava(MavenPublication)
	}
}
